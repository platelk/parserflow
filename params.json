{"name":"Parserflow","tagline":"Dart parsing library","body":"# Parserflow\r\n\r\nParserflow is a prototype of parser written in Dart inspire by [pyrser](http://pythonhosted.org/pyrser) and [PetitParser](https://github.com/petitparser/dart-petitparser).\r\nThis parser aims to provide a simple tool to implement different type of parser like LL(k) or LR(k), by offering simple mechanism like hook or grammar definition.\r\n\r\n## Aims\r\n\r\nThe main objective of parserflow is to provide enough abstraction and functionality to easily implement the parser do you need.\r\n\r\n## Features\r\n\r\nParserflow allow you to :\r\n- **[DONE]** Create your grammar by code like : \r\n```dart\r\nvar myRule = (isDigit | isMathOperator) & isNum;\r\n```\r\n- **[DONE]** Use a comprehensive syntax to define quantity like\r\n```dart\r\nvar myRule = (isDigit[\"*\"] | isMathOperator[\"*\"]) & isDigit[3]\r\n```\r\n- **[DONE]** Simply define hook\r\n```dart\r\n  var number = (has(\"-\")[\"*\"] & isNum)..name = \"number\";\r\n  number.onParse.listen((i) {\r\n    print(\"number: ${i.matchData}\");\r\n    i[\"value\"] = int.parse(i.matchData.join());\r\n  });\r\n```\r\n- **[TO DO]** Use directly some parser implementation like LL(k) or LR(k)\r\n- **[TO DO]** Directly parse from a BNF\r\n   \r\n## Example\r\n\r\n### Create rules and parse a simple string\r\nHere a example of a simple rules creation and parse a simple string\r\n```dart\r\nimport 'package:parserflow/parserflow.dart';\r\n\r\nvoid main() {\r\n    var s = \"96-96*2\";\r\n    \r\n    var r = isNum[\"?\"] & isMathOperator & isNum & (isMathOperator[\"?\"] & isNum)[\"*\"];\r\n    var a = r.consume(s);\r\n    print(a);\r\n}\r\n```\r\n\r\n### Parse a simple math expression\r\nHere a part of the example that you can find in 'example/math_expr.dart'\r\n```dart\r\nmain() {\r\n  var number = (has(\"-\")[\"*\"] & isNum)..name = \"number\";\r\n  var op = hasRegExp(r'[+|-]')..name = \"op\";\r\n\r\n  var expr = number & (op & number)[\"*\"];\r\n\r\n  var input = \"968 + 2 - 20\";\r\n  var res = expr.check(input);\r\n  var tree = res.matchTree();\r\n  \r\n  print(tree);\r\n  print(\"${input} = ${visitChild(tree, [])[0]}\");\r\n}\r\n```\r\n\r\n## Future\r\n\r\nActually my main focus is to make parserflow as easy as possible, but the second step will be to make it a quick as posible.\r\n\r\n## The Author\r\n\r\nActualy this library is developped by myself, if you have any idea, amelioration, bug, ... do not hesitate contacting me.\r\nG+ : [+Kevin PLATEL](https://plus.google.com/+KÃ©vinPlatel)\r\nMail : [Kevin PLATEL](platel.kevin@gmail.com)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}